{"version":3,"sources":["components/header/index.js","components/context/index.js","components/profile/index.js","components/localState/index.js","components/dashboard/index.js","components/login/index.js","components/register/index.js","components/loading/index.js","App.js","index.js"],"names":["Header","layt","layout","darkMode","setDarkMode","history","dp","handleProfile","className","src","onClick","alt","localStorage","removeItem","push","LoadContext","createContext","Profile","user","setUser","React","useState","setDp","useHistory","setLoading","useContext","handleDp","e","tdp","target","files","size","reader","FileReader","onload","re","temp","btoa","result","readAsBinaryString","alert","handleSubmit","preventDefault","name","value","pass","password","fetch","process","method","headers","getItem","body","JSON","stringify","res","status","replace","useEffect","onSubmit","type","accept","onChange","htmlFor","placeholder","defaultValue","minLength","required","disabled","useStickyState","key","stickyValue","window","parse","setValue","setItem","Dashboard","todo","settodo","todoList","settodoList","expand","setexpand","setlayout","showProfile","setShowProfile","prev","handleAdd","details","send","json","handleDelete","id","filter","t","_id","handleCompleted","element","findIndex","elem","newtodoList","isCompleted","init","token","jwt","decode","rows","onBlur","map","Date","date","toLocaleString","checked","Login","email","response","to","Register","Loading","App","loading","Provider","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.756aa9ff.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./index.scss\";\r\nimport {\r\n    RiLayoutGridLine,\r\n    RiLayoutRowLine,\r\n    RiSunLine,\r\n    RiSunFill,\r\n    RiLogoutCircleRLine,\r\n} from \"react-icons/ri\";\r\n\r\nconst Header = ({\r\n    layt,\r\n    layout,\r\n    darkMode,\r\n    setDarkMode,\r\n    history,\r\n    dp,\r\n    handleProfile,\r\n}) => {\r\n    return (\r\n        <header className=\"header\">\r\n            <img src=\"https://www.gstatic.com/images/branding/product/1x/keep_2020q4_48dp.png\" />\r\n            <p className=\"KC\">Keep clone</p>\r\n            <div className=\"layoutBtn\" onClick={handleProfile}>\r\n                {dp !== \"false\" ? (\r\n                    <img\r\n                        className=\"dp\"\r\n                        alt=\"dp\"\r\n                        src={`data:image/jpeg;base64,${dp}`}\r\n                    />\r\n                ) : (\r\n                    <div className=\"dp\" />\r\n                )}\r\n            </div>\r\n\r\n            <div className=\"layoutBtn\" onClick={() => layt()}>\r\n                {layout ? <RiLayoutRowLine /> : <RiLayoutGridLine />}\r\n            </div>\r\n            <div className=\"layoutBtn\" onClick={() => setDarkMode(!darkMode)}>\r\n                {darkMode ? <RiSunFill /> : <RiSunLine />}\r\n            </div>\r\n            <div\r\n                className=\"layoutBtn\"\r\n                onClick={() => {\r\n                    localStorage.removeItem(\"token\");\r\n                    history.push(\"/login\");\r\n                }}\r\n            >\r\n                <RiLogoutCircleRLine />\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import { createContext } from \"react\";\r\nexport const LoadContext = createContext();\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { LoadContext } from \"../context\";\r\nimport \"../login/index.scss\";\r\n\r\nconst Profile = ({ user, handleProfile, setUser }) => {\r\n    const [dp, setDp] = React.useState(\"false\");\r\n    let history = useHistory();\r\n    const { setLoading } = React.useContext(LoadContext);\r\n    const handleDp = async (e) => {\r\n        let tdp = e.target.files[0];\r\n        if (tdp && tdp.size < 2000000) {\r\n            const reader = new FileReader();\r\n            reader.onload = (re) => {\r\n                let temp = btoa(re.target.result);\r\n                setDp(temp);\r\n            };\r\n            reader.readAsBinaryString(tdp);\r\n        } else {\r\n            alert(\"please choose file of size less than 2MB!\");\r\n        }\r\n    };\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        const name = e.target.name.value;\r\n        let pass = e.target.password.value;\r\n        if (pass === \"\") {\r\n            pass = false;\r\n        }\r\n        let res = await fetch(`${process.env.REACT_APP_BASE_URL + \"/update\"}`, {\r\n            method: \"PUT\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"x-access-token\": localStorage.getItem(\"token\"),\r\n            },\r\n            body: JSON.stringify({\r\n                name: name,\r\n                password: pass,\r\n                dp: dp,\r\n            }),\r\n        });\r\n        setLoading(false);\r\n        if (res.status === 200) {\r\n            alert(\"yay! successfully updated!\");\r\n            setUser([name, user[1], dp]);\r\n            handleProfile();\r\n            if (pass) {\r\n                localStorage.removeItem(\"token\");\r\n                history.replace(\"/login\");\r\n            }\r\n        } else {\r\n            alert(\"Something went wrong\");\r\n        }\r\n    };\r\n    React.useEffect(() => {\r\n        setDp(user[2]);\r\n    }, []);\r\n    return (\r\n        <div className=\"login-container\">\r\n            <h3 className=\"start\">\r\n                Here's your profile <span className=\"high\">╰(*°▽°*)╯</span>{\" \"}\r\n            </h3>\r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    <div className=\"avatar\">\r\n                        {dp !== \"false\" && (\r\n                            <img\r\n                                className=\"dp\"\r\n                                alt=\"dp\"\r\n                                src={`data:image/jpeg;base64,${dp}`}\r\n                            />\r\n                        )}\r\n                        <span className=\"upload\" />\r\n                    </div>\r\n                    <input\r\n                        type=\"file\"\r\n                        name=\"dp\"\r\n                        accept=\".jpeg, .jpg,.png\"\r\n                        onChange={handleDp}\r\n                    />\r\n                </label>\r\n                <div className=\"inp-content\">\r\n                    <label htmlFor=\"name\" className=\"label\">\r\n                        Your name\r\n                    </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        placeholder=\" \"\r\n                        defaultValue={user[0]}\r\n                        minLength=\"3\"\r\n                        required\r\n                    />\r\n                    <hr className=\"border-bottom\" />\r\n                    <span className=\"placeholder\">name</span>\r\n                </div>\r\n                <div className=\"inp-content\">\r\n                    <label htmlFor=\"email\" className=\"label\">\r\n                        Your email\r\n                    </label>\r\n                    <input\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        defaultValue={user[1]}\r\n                        disabled\r\n                        required\r\n                    />\r\n                    <hr className=\"border-bottom\" />\r\n                    <span className=\"placeholder\">email</span>\r\n                </div>\r\n                <div className=\"inp-content\">\r\n                    <label htmlFor=\"password\" className=\"label\">\r\n                        Changing password will log you out!\r\n                    </label>\r\n                    <input\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        placeholder=\" \"\r\n                        minLength=\"6\"\r\n                    />\r\n                    <hr className=\"border-bottom\" />\r\n                    <span className=\"placeholder\">password</span>\r\n                </div>\r\n                <center>\r\n                    <input\r\n                        type=\"submit\"\r\n                        value=\"Update\"\r\n                        className=\"form-button\"\r\n                    />\r\n                </center>\r\n                <div className=\"link\" onClick={handleProfile}>\r\n                    Click here to go back!\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nconst useStickyState = (defaultValue, key) => {\r\n    const [value, setValue] = React.useState(() => {\r\n        const stickyValue = window.localStorage.getItem(key);\r\n        return stickyValue !== null ? JSON.parse(stickyValue) : defaultValue;\r\n    });\r\n    React.useEffect(() => {\r\n        window.localStorage.setItem(key, JSON.stringify(value));\r\n    }, [key, value]);\r\n    return [value, setValue];\r\n};\r\nexport default useStickyState;\r\n","import React from \"react\";\r\nimport Header from \"../header\";\r\nimport Profile from \"../profile\";\r\nimport useStickyState from \"../localState\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { LoadContext } from \"../context\";\r\nimport \"./index.scss\";\r\nimport { MdDelete } from \"react-icons/md\";\r\n\r\nconst Dashboard = () => {\r\n    const [todo, settodo] = React.useState(\"\");\r\n    const [todoList, settodoList] = React.useState([]);\r\n    const [expand, setexpand] = React.useState(false);\r\n    const [layout, setlayout] = useStickyState(true, \"layout\");\r\n    const [darkMode, setDarkMode] = useStickyState(false, \"dark-mode\");\r\n    const [user, setUser] = React.useState([\"false\", \"false\", \"false\"]);\r\n    const [showProfile, setShowProfile] = React.useState(false);\r\n    const history = useHistory();\r\n    const { setLoading } = React.useContext(LoadContext);\r\n\r\n    const lay = () => {\r\n        setlayout((prev) => !prev);\r\n    };\r\n\r\n    const handleVal = (e) => settodo(e.target.value);\r\n\r\n    const handlexpand = () => setexpand(true);\r\n\r\n    const handleProfile = () => setShowProfile((prev) => !prev);\r\n\r\n    const handleAdd = async () => {\r\n        if (todo != \"\") {\r\n            let details = {\r\n                value: todo,\r\n            };\r\n            setLoading(true);\r\n            let send = await fetch(\r\n                `${process.env.REACT_APP_BASE_URL + \"/notes\"}`,\r\n                {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"x-access-token\": localStorage.getItem(\"token\"),\r\n                    },\r\n                    body: JSON.stringify(details),\r\n                }\r\n            );\r\n            setLoading(false);\r\n            if (send.status === 200) {\r\n                details = await send.json();\r\n                settodoList([...todoList, details]);\r\n                settodo(\"\");\r\n                setexpand(false);\r\n            } else {\r\n                alert(\"something went wrong, try again!\");\r\n            }\r\n        } else setexpand(false);\r\n    };\r\n\r\n    const handleDelete = async (id) => {\r\n        setLoading(true);\r\n        let res = await fetch(\r\n            `${process.env.REACT_APP_BASE_URL}/notes?id=${id}`,\r\n            {\r\n                method: \"DELETE\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"x-access-token\": localStorage.getItem(\"token\"),\r\n                },\r\n            }\r\n        );\r\n        setLoading(false);\r\n        if (res.status === 200) {\r\n            settodoList(todoList.filter((t) => t._id != id));\r\n        } else {\r\n            alert(\"something went wrong\");\r\n        }\r\n    };\r\n\r\n    const handleCompleted = async (id) => {\r\n        const element = todoList.findIndex((elem) => elem._id === id);\r\n        const newtodoList = [...todoList];\r\n        let temp = newtodoList[element].isCompleted;\r\n        let res = await fetch(\r\n            `${\r\n                process.env.REACT_APP_BASE_URL\r\n            }/notes?id=${id}&isCompleted=${!temp}`,\r\n            {\r\n                method: \"PATCH\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"x-access-token\": localStorage.getItem(\"token\"),\r\n                },\r\n                body: JSON.stringify({ value: newtodoList[element].value }),\r\n            }\r\n        );\r\n        if (res.status === 200) {\r\n            newtodoList[element] = {\r\n                ...newtodoList[element],\r\n                isCompleted: !temp,\r\n            };\r\n\r\n            settodoList(newtodoList);\r\n        } else {\r\n            alert(\"something went wrong\");\r\n        }\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        setLoading(true);\r\n        const init = async (token) => {\r\n            let res = await fetch(\r\n                `${process.env.REACT_APP_BASE_URL + \"/notes\"}`,\r\n                {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"x-access-token\": token,\r\n                    },\r\n                }\r\n            );\r\n            setLoading(false);\r\n            if (res.status === 200) {\r\n                res = await res.json();\r\n                settodoList(res[0]);\r\n                setUser([res[1], res[2], res[3]]);\r\n            } else if (res.status === 401) {\r\n                localStorage.removeItem(\"token\");\r\n                alert(\"relogin again\");\r\n                history.replace(\"/login\");\r\n            }\r\n        };\r\n        const token = localStorage.getItem(\"token\");\r\n        if (token) {\r\n            const user = jwt.decode(token);\r\n            if (!user) {\r\n                localStorage.removeItem(\"token\");\r\n                setLoading(false);\r\n                history.replace(\"/login\");\r\n            } else {\r\n                init(token);\r\n            }\r\n        } else {\r\n            setLoading(false);\r\n            history.replace(\"/login\");\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className={`main ${darkMode && \"darkMode\"}`}>\r\n            <Header\r\n                layt={lay}\r\n                layout={layout}\r\n                darkMode={darkMode}\r\n                setDarkMode={setDarkMode}\r\n                history={history}\r\n                dp={user[2]}\r\n                handleProfile={handleProfile}\r\n            />\r\n            {showProfile ? (\r\n                <Profile\r\n                    user={user}\r\n                    handleProfile={handleProfile}\r\n                    setUser={setUser}\r\n                />\r\n            ) : (\r\n                <>\r\n                    <form className=\"addNote\">\r\n                        <textarea\r\n                            rows={expand ? 3 : 1}\r\n                            value={todo}\r\n                            onClick={handlexpand}\r\n                            onChange={handleVal}\r\n                            onBlur={handleAdd}\r\n                            placeholder=\"Take your note...\"\r\n                        />\r\n                    </form>\r\n\r\n                    {todoList != [] ? (\r\n                        <ul className={`container ${!layout && \"f\"}`}>\r\n                            {todoList.map((t) => (\r\n                                <li\r\n                                    key={t._id}\r\n                                    className={`noteholder ${!layout && \"f\"}`}\r\n                                >\r\n                                    <div\r\n                                        className={`note-text ${\r\n                                            !layout && \"f\"\r\n                                        }`}\r\n                                    >\r\n                                        <span\r\n                                            className={t.isCompleted && \"cross\"}\r\n                                        >\r\n                                            {t.value}\r\n                                        </span>\r\n                                        <span className=\"tools\">\r\n                                            <span className=\"date\">\r\n                                                {`${new Date(\r\n                                                    t.date\r\n                                                ).toLocaleString()}`}\r\n                                            </span>\r\n                                            <button\r\n                                                className=\"btn\"\r\n                                                onClick={() =>\r\n                                                    handleDelete(t._id)\r\n                                                }\r\n                                            >\r\n                                                <MdDelete />\r\n                                            </button>\r\n                                            <input\r\n                                                className=\"btn\"\r\n                                                type=\"checkbox\"\r\n                                                id=\"completed\"\r\n                                                checked={t.isCompleted}\r\n                                                onChange={() =>\r\n                                                    handleCompleted(t._id)\r\n                                                }\r\n                                            />\r\n                                        </span>\r\n                                    </div>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    ) : null}\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React from \"react\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport { LoadContext } from \"../context\";\r\nimport \"./index.scss\";\r\n\r\nconst Login = () => {\r\n    let history = useHistory();\r\n    const { setLoading } = React.useContext(LoadContext);\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        const email = e.target.email.value;\r\n        const pass = e.target.password.value;\r\n        let res = await fetch(`${process.env.REACT_APP_BASE_URL + \"/login\"}`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({ email: email, password: pass }),\r\n        });\r\n        if (res.status === 200) {\r\n            let response = await res.json();\r\n            localStorage.setItem(\"token\", response.user);\r\n            history.push(\"/\");\r\n        } else {\r\n            setLoading(false);\r\n            alert(\"wrong username or password\");\r\n        }\r\n    };\r\n    React.useEffect(() => {\r\n        const token = localStorage.getItem(\"token\");\r\n        if (token) {\r\n            history.replace(\"/\");\r\n        }\r\n    }, []);\r\n    return (\r\n        <div className=\"login-container\">\r\n            <h3 className=\"start\">\r\n                Let's set go <span className=\"high\">╰(*°▽°*)╯</span>{\" \"}\r\n            </h3>\r\n            <div className=\"avatar\" />\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"inp-content\">\r\n                    <label htmlFor=\"email\" className=\"label\">\r\n                        Please enter your email\r\n                    </label>\r\n                    <input type=\"email\" name=\"email\" placeholder=\" \" required />\r\n                    <hr className=\"border-bottom\" />\r\n                    <span className=\"placeholder\">email</span>\r\n                </div>\r\n                <div className=\"inp-content\">\r\n                    <label htmlFor=\"password\" className=\"label\">\r\n                        Please enter your password\r\n                    </label>\r\n                    <input\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        placeholder=\" \"\r\n                        minLength=\"6\"\r\n                        required\r\n                    />\r\n                    <hr className=\"border-bottom\" />\r\n                    <span className=\"placeholder\">password</span>\r\n                </div>\r\n                <center>\r\n                    <input\r\n                        type=\"submit\"\r\n                        value=\"Login\"\r\n                        className=\"form-button\"\r\n                    />\r\n                </center>\r\n                <Link to=\"/register\" className=\"link\">\r\n                    Click here to register\r\n                </Link>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport { LoadContext } from \"../context\";\r\nimport \"../login/index.scss\";\r\n\r\nconst Register = () => {\r\n    const [dp, setDp] = React.useState(false);\r\n    let history = useHistory();\r\n    const { setLoading } = React.useContext(LoadContext);\r\n    const handleDp = async (e) => {\r\n        let tdp = e.target.files[0];\r\n        if (tdp && tdp.size < 2000000) {\r\n            const reader = new FileReader();\r\n            reader.onload = (re) => {\r\n                let temp = btoa(re.target.result);\r\n                setDp(temp);\r\n            };\r\n            reader.readAsBinaryString(tdp);\r\n        } else {\r\n            alert(\"please choose file of size less than 2MB!\");\r\n        }\r\n    };\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        const name = e.target.email.value;\r\n        const email = e.target.email.value;\r\n        const pass = e.target.password.value;\r\n        let res = await fetch(\r\n            `${process.env.REACT_APP_BASE_URL + \"/register\"}`,\r\n            {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify({\r\n                    name: name,\r\n                    email: email,\r\n                    password: pass,\r\n                    dp: dp,\r\n                }),\r\n            }\r\n        );\r\n        setLoading(false);\r\n        if (res.status === 200) {\r\n            history.push(\"/login\");\r\n        } else {\r\n            alert(\"user already exist\");\r\n        }\r\n    };\r\n    React.useEffect(() => {\r\n        const token = localStorage.getItem(\"token\");\r\n        if (token) {\r\n            history.replace(\"/\");\r\n        }\r\n    }, []);\r\n    return (\r\n        <div className=\"login-container\">\r\n            <h3 className=\"start\">\r\n                Let's get started <span className=\"high\">╰(*°▽°*)╯</span>{\" \"}\r\n            </h3>\r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    <div className=\"avatar\">\r\n                        {dp && (\r\n                            <img\r\n                                className=\"dp\"\r\n                                alt=\"dp\"\r\n                                src={`data:image/jpeg;base64,${dp}`}\r\n                            />\r\n                        )}\r\n                        <span className=\"upload\" />\r\n                    </div>\r\n                    <input\r\n                        type=\"file\"\r\n                        name=\"dp\"\r\n                        accept=\".jpeg, .jpg,.png\"\r\n                        onChange={handleDp}\r\n                    />\r\n                </label>\r\n                <div className=\"inp-content\">\r\n                    <label htmlFor=\"name\" className=\"label\">\r\n                        Please enter your name\r\n                    </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        placeholder=\" \"\r\n                        minLength=\"3\"\r\n                        required\r\n                    />\r\n                    <hr className=\"border-bottom\" />\r\n                    <span className=\"placeholder\">name</span>\r\n                </div>\r\n                <div className=\"inp-content\">\r\n                    <label htmlFor=\"email\" className=\"label\">\r\n                        Please enter your email\r\n                    </label>\r\n                    <input type=\"email\" name=\"email\" placeholder=\" \" required />\r\n                    <hr className=\"border-bottom\" />\r\n                    <span className=\"placeholder\">email</span>\r\n                </div>\r\n                <div className=\"inp-content\">\r\n                    <label htmlFor=\"password\" className=\"label\">\r\n                        Please enter your password\r\n                    </label>\r\n                    <input\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        placeholder=\" \"\r\n                        minLength=\"6\"\r\n                        required\r\n                    />\r\n                    <hr className=\"border-bottom\" />\r\n                    <span className=\"placeholder\">password</span>\r\n                </div>\r\n                <center>\r\n                    <input\r\n                        type=\"submit\"\r\n                        value=\"Register\"\r\n                        className=\"form-button\"\r\n                    />\r\n                </center>\r\n                <Link to=\"/login\" className=\"link\">\r\n                    Click here to login\r\n                </Link>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n","import \"./index.scss\";\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <div className=\"loading-container\">\r\n            <span className=\"loading\" />\r\n        </div>\r\n    );\r\n};\r\nexport default Loading;\r\n","import React from \"react\";\r\nimport Dashboard from \"./components/dashboard\";\r\nimport Login from \"./components/login\";\r\nimport Register from \"./components/register\";\r\nimport { LoadContext } from \"./components/context\";\r\nimport Loading from \"./components/loading\";\r\nimport { HashRouter as Router, Route } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n    const [loading, setLoading] = React.useState(false);\r\n    return (\r\n        <LoadContext.Provider value={{ setLoading }}>\r\n            {loading && <Loading />}\r\n            <Router>\r\n                <Route path=\"/login\" exact component={Login} />\r\n                <Route path=\"/register\" exact component={Register} />\r\n                <Route path=\"/\" exact component={Dashboard} />\r\n            </Router>\r\n        </LoadContext.Provider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}